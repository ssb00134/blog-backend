let mongoose,Schema,bcrypt;_0fd‍.x([["default",()=>_0fd‍.o]]);_0fd‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}],["Schema",["Schema"],function(v){Schema=v}]]);_0fd‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);


const UserSchema = new Schema({
	username: String,
	hashedPassword: String,
});

UserSchema.methods.setPassword = async function (password) {
	const hash = await bcrypt.hash(password, 10);
	this.hashedPassword = hash;
};

UserSchema.methods.checkPassword = async function (password) {
	const result = await bcrypt.compare(password, this.hashedPassword);
	return result; // true / false
};

UserSchema.statics.findByUsername = function (username) {
	return this.findOne({ username });
};

const User = mongoose.model('User', UserSchema);
_0fd‍.d(User);
